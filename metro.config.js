const { getDefaultConfig } = require('@expo/metro-config');

const config = getDefaultConfig(__dirname);

module.exports = {
  ...config,
  resolver: {
    ...config.resolver,
    extraNodeModules: {
      '@expo/metro-config': require.resolve('@expo/metro-config'),
      '@expo/metro-runtime': require.resolve('@expo/metro-runtime'),
      '@expo/vector-icons': require.resolve('@expo/vector-icons'),
      '@react-native/assets-registry': require.resolve('@react-native/assets-registry'),
      '@react-native/codegen': require.resolve('@react-native/codegen'),
      '@react-native/community-cli-plugin': require.resolve('@react-native/community-cli-plugin'),
      '@react-native/debugger-frontend': require.resolve('@react-native/debugger-frontend'),
      '@react-native/dev-middleware': require.resolve('@react-native/dev-middleware'),
      '@react-native/gradle-plugin': require.resolve('@react-native/gradle-plugin'),
      '@react-native/js-polyfills': require.resolve('@react-native/js-polyfills'),
      '@react-native/virtualized-lists': require.resolve('@react-native/virtualized-lists'),
      '@react-navigation/bottom-tabs': require.resolve('@react-navigation/bottom-tabs'),
      '@react-navigation/elements': require.resolve('@react-navigation/elements'),
      '@react-navigation/native': require.resolve('@react-navigation/native'),
      'expo': require.resolve('expo'),
      'expo-av': require.resolve('expo-av'),
      'expo-blur': require.resolve('expo-blur'),
      'expo-camera': require.resolve('expo-camera'),
      'expo-constants': require.resolve('expo-constants'),
      'expo-document-picker': require.resolve('expo-document-picker'),
      'expo-file-system': require.resolve('expo-file-system'),
      'expo-font': require.resolve('expo-font'),
      'expo-haptics': require.resolve('expo-haptics'),
      'expo-image-picker': require.resolve('expo-image-picker'),
      'expo-linking': require.resolve('expo-linking'),
      'expo-location': require.resolve('expo-location'),
      'expo-router': require.resolve('expo-router'),
      'expo-splash-screen': require.resolve('expo-splash-screen'),
      'expo-status-bar': require.resolve('expo-status-bar'),
      'expo-system-ui': require.resolve('expo-system-ui'),
      'expo-web-browser': require.resolve('expo-web-browser'),
      'invariant': require.resolve('invariant'),
      'metro': require.resolve('metro'),
      'react': require.resolve('react'),
      'react-dom': require.resolve('react-dom'),
      'react-native': require.resolve('react-native'),
      'react-native-gesture-handler': require.resolve('react-native-gesture-handler'),
      'react-native-otp-verify': require.resolve('react-native-otp-verify'),
      'react-native-reanimated': require.resolve('react-native-reanimated'),
      'react-native-safe-area-context': require.resolve('react-native-safe-area-context'),
      'react-native-screens': require.resolve('react-native-screens'),
      'react-native-web': require.resolve('react-native-web'),
      'react-native-webview': require.resolve('react-native-webview'),
      'whatwg-fetch': require.resolve('whatwg-fetch'),
      'ws': require.resolve('ws'),
    },
    sourceExts: ['jsx', 'js', 'ts', 'tsx', 'cjs', 'mjs'],
    assetExts: ['glb', 'gltf', 'png', 'jpg', 'jpeg', 'svg', 'ttf', 'otf'],
  },
  transformer: {
    ...config.transformer,
    getTransformOptions: async () => ({
      transform: {
        experimentalImportSupport: false,
        inlineRequires: true,
      },
    }),
  },
};